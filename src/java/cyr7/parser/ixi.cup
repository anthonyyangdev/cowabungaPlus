/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cyr7.parser;

import java_cup.runtime.*;
import cyr7.lexer.MyLexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
    MyLexer lexer;
:};

/* define how to connect to the scanner! */
init with {:
:};

scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */


// Punctuation
terminal L_PAREN, R_PAREN, L_SQ_BRKT, R_SQ_BRKT;
terminal COLON, SEMICOLON, COMMA;

// types
terminal TYPE_INT, TYPE_BOOL;

// misc
terminal ID, 

// Program-wide
nonterminal program, FunctionDeclList, Statement, FunctionDecl, StatementEnd;

nonterminal Arg, Arglist, ReturnType, ReturnTypeList, Type, Primitive, ArrayStruct;


program ::= FunctionDeclList                {System.out.println("FunctionDeclList")};





/* The grammar rules */
/*
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println(e); :}
            ;
            
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;        :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;        :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;        :}
             | MINUS expr:e                 {: RESULT = -e;           :}
             %prec UMINUS
             | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;
*/