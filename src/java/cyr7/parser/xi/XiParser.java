
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package cyr7.parser.xi;

import java_cup.runtime.*;
import cyr7.lexer.MyLexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

/** CUP v0.11b 20150326 generated parser.
  */
public class XiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public XiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public XiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\003\000\002\002\002\000\002\002\004\000\002\002" +
    "\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\006\002\001\053\004\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$XiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 1;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


    MyLexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XiParser$actions {
    private final XiParser parser;

    /** Constructor */
    CUP$XiParser$actions(XiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 2. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action_part00000000(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$XiParser$result;

        /* select the action based on the action number */
        switch (CUP$XiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // program ::= 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int start_valright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                Object start_val = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                RESULT = start_val;
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$XiParser$parser.done_parsing();
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // program ::= LOGICAL_OR 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$XiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            return CUP$XiParser$do_action_part00000000(
                           CUP$XiParser$act_num,
                           CUP$XiParser$parser,
                           CUP$XiParser$stack,
                           CUP$XiParser$top);
    }
}

}
