/*
   Simple +/-/* expression language;
   parser evaluates constant expressions on the fly
*/

package cyr7.parser;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import cyr7.ast.*;
import cyr7.ast.expr.*;
import cyr7.ast.expr.access.*;
import cyr7.ast.expr.binexpr.*;
import cyr7.ast.expr.literalexpr.*;
import cyr7.ast.expr.unaryexpr.*;
import cyr7.ast.toplevel.*;
import cyr7.ast.stmt.*;
import cyr7.ast.type.*;
import cyr7.exceptions.parser.*;
import cyr7.lexer.LexerUtil;
import cyr7.lexer.MyLexer;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Optional;

parser code {:

public ASTFactory ast(Location location) {
    return new ASTFactory(location);
}

@Override
public void unrecovered_syntax_error(Symbol token) throws Exception {
    ComplexSymbol cur_token = (ComplexSymbol) token;
    if (cur_token.sym == sym.INT_MAX) {
        throw new ParserIntegerOverflowException(cur_token.xleft);
    } else {
        throw new UnexpectedTokenException(cur_token);
    }
}

@Override
public void syntax_error(Symbol cur_token) {
    // Do nothing
}

:};

action code {:
:}

/* define how to connect to the scanner! */
init with {:
:};

scan with {:
    Symbol sym = getScanner().next_token();
    return (sym != null) ? sym :
                       getSymbolFactory().newSymbol("END_OF_FILE",EOF_sym());
:};

/* Terminals (tokens returned by the scanner). */


terminal IXI_FILE, XI_FILE;
// Punctuation
terminal IF, ELSE, RETURN, USE, WHILE, LENGTH, FREE, FOR, DO;

// Identifier
terminal String ID;

// Types
terminal String TYPE_INT, TYPE_FLOAT, TYPE_BOOL, TYPE_STRING;

// Values
terminal String INT_LITERAL; // n < 2^63
terminal INT_MAX; // n == 2^63
terminal Double FLOAT_LITERAL;
terminal String STRING_LITERAL;
terminal String CHAR_LITERAL;
terminal Boolean BOOL_LITERAL;

// Punctuation
terminal L_PAREN, R_PAREN, L_SQ_BRKT, R_SQ_BRKT, L_BRACE, R_BRACE;
terminal COLON, SEMICOLON, COMMA, UNDERSCORE;

// Operators
terminal ASSIGN,
         PLUS,
         MINUS,
         STAR,
         HIGH_MULT,
         DIVIDE,
         EQUALS,
         NOT_EQUALS,
         LT,
         LTE,
         GT,
         GTE,
         NEG_BOOL,
         NEG_INT,
         REMAINDER,
         LOGICAL_AND,
         LOGICAL_OR
         ;

// Program-wide
nonterminal AbstractNode Program;

// Type Expressions

nonterminal TypeExprNode TypeExpr;
nonterminal PrimitiveTypeNode Primitive;
nonterminal LinkedList<Optional<ExprNode>> TypeExprArrayList;

// Ixi program

nonterminal IxiProgramNode IxiProgram;
nonterminal LinkedList<FunctionHeaderDeclNode> FunctionHeaderDeclList;
nonterminal FunctionHeaderDeclNode FunctionHeaderDecl;

nonterminal LinkedList<VarDeclNode> FunctionVarDeclList;

nonterminal LinkedList<TypeExprNode> ReturnType;
nonterminal LinkedList<TypeExprNode> ReturnTypeList;

// Xi program

nonterminal XiProgramNode XiProgram;
nonterminal LinkedList<UseNode> UseList;
nonterminal LinkedList<FunctionDeclNode> FunctionDeclList;
nonterminal FunctionDeclNode FunctionDecl;

nonterminal StmtNode XiStatement;
nonterminal LinkedList<StmtNode> XiStatementList;
nonterminal StmtNode SingleXiStatement;
nonterminal ReturnStmtNode ReturnStatement;
nonterminal BlockStmtNode BlockStatement;
nonterminal ForLoopStmtNode ForLoopStatement;
nonterminal DoWhileStmtNode DoWhileStatement;
nonterminal FreeStmtNode FreeStatement;
nonterminal ProcedureStmtNode ProcedureStatement;
nonterminal IfElseStmtNode IfElseStatement;
nonterminal WhileStmtNode WhileStatement;
nonterminal AssignmentStmtNode AssignmentStatement;
nonterminal ExprNode AssignmentLHS;

nonterminal StmtNode VarDeclStatement;
nonterminal VarDeclNode VarDecl;

nonterminal ArrayDeclStmtNode VarDeclArrayInit;
nonterminal LinkedList<Optional<ExprNode>> VarDeclDimensionedBracket;
nonterminal LinkedList<Optional<ExprNode>> VarDeclDimensionlessBracket;

nonterminal LinkedList<Optional<VarDeclNode>> MultiVarDeclList;
nonterminal LinkedList<ExprNode> ExprList;

nonterminal ExprNode Expr;
nonterminal ExprNode AccessExpr;
nonterminal FunctionCallExprNode FunctionCall;
nonterminal FunctionCallExprNode ProcedureCall;
nonterminal LinkedList<ExprNode> ArgParamList;
nonterminal ExprNode LiteralExpr;
nonterminal LinkedList<ExprNode> ArrayElements;
nonterminal ExprNode UnaryExpr;
nonterminal ExprNode BinaryExpr;

// Precedence

precedence nonassoc SEMICOLON;
precedence nonassoc L_BRACE;

precedence nonassoc IF;
precedence nonassoc ELSE;

precedence left LOGICAL_OR;
precedence left LOGICAL_AND;
precedence left EQUALS, NOT_EQUALS;
precedence left LT, LTE, GTE, GT;
precedence left PLUS, MINUS;
precedence left STAR, HIGH_MULT, DIVIDE, REMAINDER;
precedence nonassoc NEG_INT, NEG_BOOL;
precedence left L_PAREN, L_SQ_BRKT;

// Grammar

start with Program;

Program ::=
    IXI_FILE IxiProgram:ixi {: RESULT = ixi; :}
    | XI_FILE XiProgram:xi {: RESULT = xi; :}
    ;

// Ixi Grammar

IxiProgram ::=
    FunctionHeaderDeclList:lst {: RESULT = ast(lstxleft).ixiProgram(lst); :}
    ;

FunctionHeaderDeclList ::=
    FunctionHeaderDeclList:lst FunctionHeaderDecl:decl {:
            lst.addLast(decl);
            RESULT = lst;
        :}
    | FunctionHeaderDecl:decl {:
            RESULT = new LinkedList<>(List.of(decl));
        :}
    ;

FunctionHeaderDecl ::=
    ID:id L_PAREN R_PAREN ReturnType:returnList {:
            RESULT = ast(idxleft).funcHeader(id, List.of(), returnList);
        :}
    | ID:id L_PAREN VarDecl:v FunctionVarDeclList:l R_PAREN ReturnType:returnList {:
            l.addFirst(v);
            RESULT = ast(idxleft).funcHeader(id, l, returnList);
        :}
    ;

FunctionVarDeclList ::=
    COMMA VarDecl:v FunctionVarDeclList:l {:
            l.addFirst(v);
            RESULT = l;
        :}
    | {: RESULT = new LinkedList<>(); :}
    ;

ReturnType ::=
    COLON TypeExpr:t ReturnTypeList:lst {: lst.addFirst(t); RESULT = lst; :}
    | {: RESULT = new LinkedList<>(); :}
    ;

ReturnTypeList ::=
    ReturnTypeList:lst COMMA TypeExpr:t {: lst.addLast(t); RESULT = lst; :}
    | {: RESULT = new LinkedList<>(); :}
    ;

// Xi Grammar

XiProgram ::=
    UseList:uses FunctionDeclList:functions {: RESULT = ast(usesxleft).xiProgram(uses, functions); :}
    ;

UseList ::=
    USE:u ID:id UseList:l {: l.addFirst(ast(uxleft).use(id)); RESULT = l; :}
    | USE:u ID:id SEMICOLON UseList:l {: l.addFirst(ast(uxleft).use(id)); RESULT = l; :}
    | {: RESULT = new LinkedList<>(); :}
    ;

// Xi statements with no semicolon excluding return
XiStatement ::=
    BlockStatement:s {: RESULT = s; :}
    | ProcedureStatement:s {: RESULT = s; :}
    | FreeStatement:s {: RESULT = s; :}
    | IfElseStatement:s {: RESULT = s; :}
    | WhileStatement:s {: RESULT = s; :}
    | ForLoopStatement:s {: RESULT = s; :}
    | DoWhileStatement:s {: RESULT = s; :}
    | AssignmentStatement:s {: RESULT = s; :}
    | VarDeclStatement:s {: RESULT = s; :}
    ;

// Xi statement list excluding return
XiStatementList ::=
    SingleXiStatement:s XiStatementList:l {: l.addFirst(s); RESULT = l; :}
    | {: RESULT = new LinkedList<>(); :}
    ;

SingleXiStatement ::=
    XiStatement:s {: RESULT = s; :}
    | XiStatement:s SEMICOLON {: RESULT = s; :}
    ;

FunctionDeclList ::=
    FunctionDecl:fd FunctionDeclList:l {: l.addFirst(fd); RESULT = l; :}
    | FunctionDecl: fd {:
        RESULT = new LinkedList<>(List.of(fd));
    :}
    ;

FunctionDecl ::=
    FunctionHeaderDecl:header BlockStatement:block {:
            RESULT = ast(headerxleft).funcDecl(header, block);
        :}
    ;

BlockStatement ::=
    L_BRACE:b XiStatementList:l R_BRACE {: RESULT = ast(bxleft).block(l); :}
    | L_BRACE:b XiStatementList:l ReturnStatement:r R_BRACE {: l.addLast(r); RESULT = ast(bxleft).block(l); :}
    | L_BRACE:b XiStatementList:l ReturnStatement:r SEMICOLON R_BRACE {: l.addLast(r); RESULT = ast(bxleft).block(l); :}
    ;

ReturnStatement ::=
    RETURN:r ExprList:l {: RESULT = ast(rxleft).returnStmt(l); :}
    ;

FreeStatement ::=
    FREE:free L_PAREN Expr:e R_PAREN {: RESULT = ast(freexleft).free(e); :}
    ;

ProcedureStatement ::=
    ProcedureCall:c {: RESULT = ast(cxleft).procedure(c); :}
    ;

IfElseStatement ::=
    IF:i Expr:e SingleXiStatement:s {:
        RESULT = ast(ixleft).ifElse(e, s);
    :}
    | IF:i Expr:e SingleXiStatement:s ELSE SingleXiStatement:b {:
            RESULT = ast(ixleft).ifElse(e, s, b);
        :}
    ;

WhileStatement ::=
    WHILE:w Expr:e XiStatement:s {: RESULT = ast(wxleft).whileLoop(e, s); :}
    ;

ForLoopStatement ::=
    FOR:f L_PAREN VarDecl:v ASSIGN Expr:initial SEMICOLON Expr:e SEMICOLON SingleXiStatement:stmt R_PAREN XiStatement:body {:
        VarInitStmtNode varDecl = ast(vxleft).varInit(v, initial);
        RESULT = ast(fxleft).forLoop(varDecl, e, stmt, body);
    :}
    ;

DoWhileStatement ::=
    DO:d XiStatement:s WHILE Expr:e {:
        RESULT = ast(dxleft).doWhile(s, e);
    :}
    ;

AssignmentStatement ::=
    AssignmentLHS:a ASSIGN Expr:e {:
        RESULT = ast(axleft).assign(a, e);
    :}
    ;

AssignmentLHS ::=
    AssignmentLHS:a L_SQ_BRKT Expr:e R_SQ_BRKT {:
        RESULT = ast(axleft).arrayAccess(a, e);
        :}
    | FunctionCall:f L_SQ_BRKT Expr:e R_SQ_BRKT {:
        RESULT = ast(exleft).arrayAccess(f, e);
    :}
    | ID:id {:
        RESULT = ast(idxleft).variable(id);
    :}
    ;

VarDeclStatement ::=
    VarDeclArrayInit:arr {:
            RESULT = arr;
        :}
    | UNDERSCORE:u ASSIGN Expr:e {:
            RESULT = ast(uxleft).exprStmt(e);
        :}
    | VarDecl:v ASSIGN Expr:e {:
            RESULT = ast(vxleft).varInit(v, e);
        :}
    | VarDecl:v {:
            RESULT = ast(vxleft).varDeclStmt(v);
        :}
    | VarDecl:v COMMA MultiVarDeclList:l ASSIGN FunctionCall:e {:
            l.addFirst(Optional.of(v));
            RESULT = ast(vxleft).multiAssign(l, e);
        :}
    | UNDERSCORE:u COMMA MultiVarDeclList:l ASSIGN FunctionCall:e {:
            l.addFirst(Optional.empty());
            RESULT = ast(uxleft).multiAssign(l, e);
        :}
    ;

MultiVarDeclList ::=
    VarDecl:v COMMA MultiVarDeclList:l {:
            l.addFirst(Optional.of(v));
            RESULT = l;
        :}
    | UNDERSCORE COMMA MultiVarDeclList:l {:
            l.addFirst(Optional.empty());
            RESULT = l;
        :}
    | VarDecl:v  {:
            LinkedList<Optional<VarDeclNode>> l = new LinkedList<>();
            l.addFirst(Optional.of(v));
            RESULT = l;
        :}
    | UNDERSCORE {:
            LinkedList<Optional<VarDeclNode>> l = new LinkedList<>();
            l.addFirst(Optional.empty());
            RESULT = l;
        :}
    ;

VarDeclArrayInit ::=
    ID:id COLON Primitive:p L_SQ_BRKT Expr:v R_SQ_BRKT
      VarDeclDimensionedBracket:l {:
            l.addFirst(Optional.of(v));
            TypeExprArrayNode t = TypeExprNode.fromDimensionList(p, l);
            RESULT = ast(idxleft).arrayDecl(id, t);
        :}
    ;

VarDeclDimensionedBracket ::=
    L_SQ_BRKT Expr:v R_SQ_BRKT VarDeclDimensionedBracket:l {:
            l.addFirst(Optional.of(v));
            RESULT = l;
        :}
    | VarDeclDimensionlessBracket:l {: RESULT = l; :}
    ;

VarDeclDimensionlessBracket ::=
    L_SQ_BRKT R_SQ_BRKT VarDeclDimensionlessBracket:l {:
            l.addFirst(Optional.empty());
            RESULT = l;
        :}
    | {: RESULT = new LinkedList<>(); :}
    ;

VarDecl ::=
    ID:id COLON TypeExpr:te {: RESULT = ast(idxleft).varDecl(id, te); :}
    ;

Primitive ::=
    TYPE_INT:i {: RESULT = ast(ixleft).intType(); :}
    | TYPE_BOOL:b {: RESULT = ast(bxleft).boolType(); :}
    | TYPE_FLOAT:f {: RESULT = ast(fxleft).floatType(); :}
    ;

TypeExpr ::=
    | TYPE_STRING:s {:
            ASTFactory a = ast(sxleft);
            RESULT = a.arrayType(a.intType());
        :}
    | TYPE_STRING:s L_SQ_BRKT R_SQ_BRKT TypeExprArrayList:l {:
                l.addFirst(Optional.empty());
                l.addFirst(Optional.empty());
                ASTFactory a = ast(sxleft);
                RESULT = TypeExprNode.fromDimensionList(a.intType(), l);
            :}
    | Primitive:p L_SQ_BRKT R_SQ_BRKT TypeExprArrayList:l {:
            l.addFirst(Optional.empty());
            RESULT = TypeExprNode.fromDimensionList(p, l);
        :}
    | Primitive:p {: RESULT = p; :}
    ;

TypeExprArrayList ::=
    L_SQ_BRKT R_SQ_BRKT TypeExprArrayList:l {: l.addFirst(Optional.empty()); RESULT = l; :}
    | {: RESULT = new LinkedList<>(); :} ;

ExprList ::=
    Expr:e COMMA ExprList:l {: l.addFirst(e); RESULT = l; :}
    | Expr:e {: RESULT = new LinkedList<>(List.of(e)); :}
    | {: RESULT = new LinkedList<>(); :}
    ;

Expr ::=
    AccessExpr:e {: RESULT = e; :}
    | FunctionCall:e {: RESULT = e; :}
    | LiteralExpr:e  {: RESULT = e; :}
    | UnaryExpr:e {: RESULT = e; :}
    | BinaryExpr:e {: RESULT = e; :}
    | L_PAREN Expr:e R_PAREN {: RESULT = e; :}
    ;

AccessExpr ::=
    ID:id {: RESULT = ast(idxleft).variable(id); :}
    | Expr:e L_SQ_BRKT:l Expr:i R_SQ_BRKT {:
            RESULT = ast(lxleft).arrayAccess(e, i);
        :}
    ;
// can't have the length call in a procedure
ProcedureCall ::=
    ID:id L_PAREN R_PAREN {:
            RESULT = ast(idxleft).call(id);
        :}
    | ID:id L_PAREN Expr:e ArgParamList:l R_PAREN {:
            l.addFirst(e);
            RESULT = ast(idxleft).call(id, l);
        :}
    ;

// For an explanation of %prec https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html#cpp
FunctionCall ::=
    ID:id L_PAREN R_PAREN {:
            RESULT = ast(idxleft).call(id);
        :}
    | ID:id L_PAREN Expr:e ArgParamList:l R_PAREN {:
            l.addFirst(e);
            RESULT = ast(idxleft).call(id, l);
        :}
    ;

ArgParamList ::=
    COMMA Expr:e ArgParamList:l {: l.addFirst(e); RESULT = l; :}
    | {: RESULT = new LinkedList<>();:}
    ;

LiteralExpr ::=
    INT_LITERAL:l {: RESULT = ast(lxleft).integer(l); :}
    | FLOAT_LITERAL:l {: RESULT = ast(lxleft).floating(l); :}
    | CHAR_LITERAL:l {: RESULT = ast(lxleft).character(l); :}
    | STRING_LITERAL:l {: RESULT = ast(lxleft).string(l); :}
    | BOOL_LITERAL:l {: RESULT = ast(lxleft).bool(l); :}
    | L_BRACE ArrayElements:l R_BRACE {: RESULT = ast(lxleft).array(l); :}
    ;

ArrayElements ::=
    Expr:e COMMA ArrayElements:l {:l.addFirst(e); RESULT = l;:}
    | Expr:e {:
            LinkedList<ExprNode> l = new LinkedList<>();
            l.add(e);
            RESULT = l;
         :}
    | {: RESULT = new LinkedList<>(); :}
    ;

UnaryExpr ::=
    NEG_BOOL:n Expr:e {: RESULT = ast(nxleft).negateBool(e); :}
    | MINUS:m Expr:e {:
            RESULT = ast(mxleft).negateNumber(e);
        :} %prec NEG_INT
    | MINUS:m INT_MAX:i {:
            ExprNode e = ast(ixleft).integer(MyLexer.maxIntegerString);
            RESULT = ast(mxleft).negateNumber(e);
        :} %prec NEG_INT
    | LENGTH:len L_PAREN Expr:e R_PAREN {:
            RESULT = ast(lenxleft).length(e);
        :}
    ;

BinaryExpr ::=
    Expr:e1 STAR Expr:e2 {: RESULT = ast(e1xleft).mul(e1, e2); :}
    | Expr:e1 HIGH_MULT Expr:e2 {: RESULT = ast(e1xleft).highMul(e1, e2); :}
    | Expr:e1 DIVIDE Expr:e2 {: RESULT = ast(e1xleft).div(e1, e2); :}
    | Expr:e1 REMAINDER Expr:e2 {: RESULT = ast(e1xleft).rem(e1, e2); :}
    | Expr:e1 PLUS Expr:e2 {: RESULT = ast(e1xleft).add(e1, e2); :}
    | Expr:e1 MINUS Expr:e2 {: RESULT = ast(e1xleft).sub(e1, e2); :}
    | Expr:e1 LT Expr:e2 {: RESULT = ast(e1xleft).lt(e1, e2); :}
    | Expr:e1 LTE Expr:e2 {: RESULT = ast(e1xleft).lte(e1, e2); :}
    | Expr:e1 GT Expr:e2 {: RESULT = ast(e1xleft).gt(e1, e2); :}
    | Expr:e1 GTE Expr:e2 {: RESULT = ast(e1xleft).gte(e1, e2); :}
    | Expr:e1 EQUALS Expr:e2 {: RESULT = ast(e1xleft).eq(e1, e2); :}
    | Expr:e1 NOT_EQUALS Expr:e2 {: RESULT = ast(e1xleft).neq(e1, e2); :}
    | Expr:e1 LOGICAL_AND Expr:e2 {: RESULT = ast(e1xleft).and(e1, e2); :}
    | Expr:e1 LOGICAL_OR Expr:e2 {: RESULT = ast(e1xleft).or(e1, e2); :}
    ;

