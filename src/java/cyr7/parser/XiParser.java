
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package cyr7.parser;

import java_cup.runtime.*;
import cyr7.ast.*;
import java.util.LinkedList;

/** CUP v0.11b 20150326 generated parser.
  */
public class XiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public XiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public XiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\005\004" +
    "\000\002\006\007\000\002\007\003\000\002\007\002\000" +
    "\002\010\006\000\002\010\002\000\002\011\007\000\002" +
    "\011\002\000\002\012\005\000\002\012\002\000\002\013" +
    "\005\000\002\013\002\000\002\014\005\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\004\004\001\002\000\006\002\ufffd\014" +
    "\ufffd\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002\000\006\002\uffff\014" +
    "\012\001\002\000\006\002\ufffe\014\ufffe\001\002\000\004" +
    "\023\016\001\002\000\010\002\ufff9\014\ufff9\032\014\001" +
    "\002\000\006\002\ufffa\014\ufffa\001\002\000\006\002\ufffc" +
    "\014\ufffc\001\002\000\006\014\020\024\ufff7\001\002\000" +
    "\004\024\035\001\002\000\004\031\021\001\002\000\006" +
    "\015\023\016\024\001\002\000\010\024\ufff5\025\027\033" +
    "\025\001\002\000\016\002\uffef\014\uffef\024\uffef\025\uffef" +
    "\032\uffef\033\uffef\001\002\000\016\002\uffee\014\uffee\024" +
    "\uffee\025\uffee\032\uffee\033\uffee\001\002\000\004\014\031" +
    "\001\002\000\004\024\ufff8\001\002\000\004\026\030\001" +
    "\002\000\016\002\ufff0\014\ufff0\024\ufff0\025\ufff0\032\ufff0" +
    "\033\ufff0\001\002\000\004\031\032\001\002\000\006\015" +
    "\023\016\024\001\002\000\010\024\ufff5\025\027\033\025" +
    "\001\002\000\004\024\ufff6\001\002\000\012\002\ufff3\014" +
    "\ufff3\031\036\032\ufff3\001\002\000\006\015\023\016\024" +
    "\001\002\000\010\002\ufffb\014\ufffb\032\ufffb\001\002\000" +
    "\014\002\ufff1\014\ufff1\025\027\032\ufff1\033\ufff1\001\002" +
    "\000\012\002\ufff4\014\ufff4\032\ufff4\033\042\001\002\000" +
    "\006\015\023\016\024\001\002\000\014\002\ufff2\014\ufff2" +
    "\025\027\032\ufff2\033\ufff2\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\002\004\001\001\000\006\003\006\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\010\006\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\021\001\001" +
    "\000\004\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\032\001" +
    "\001\000\004\011\033\001\001\000\002\001\001\000\004" +
    "\012\036\001\001\000\004\014\037\001\001\000\002\001" +
    "\001\000\004\013\040\001\001\000\002\001\001\000\004" +
    "\014\042\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$XiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	Symbol sym = getScanner().next_token();
 	return (sym != null) ? sym : getSymbolFactory().newSymbol("END_OF_FILE",EOF_sym()); 

    }




/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XiParser$actions {



    private final XiParser parser;

    /** Constructor */
    CUP$XiParser$actions(XiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 19. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action_part00000000(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$XiParser$result;

        /* select the action based on the action number */
        switch (CUP$XiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int start_valright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                ProgramNode start_val = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<ProgramNode> value();
                RESULT = start_val;
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$XiParser$parser.done_parsing();
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= IXI_FILE ixi_program 
            {
                ProgramNode RESULT = null;
                int ixileft = CUP$XiParser$stack.peek().left;
                int ixiright = CUP$XiParser$stack.peek().right;
                IxiProgramNode ixi = CUP$XiParser$stack.peek().<IxiProgramNode> value();
                 RESULT = ixi; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // ixi_program ::= FunctionDeclList 
            {
                IxiProgramNode RESULT = null;
                int lstleft = CUP$XiParser$stack.peek().left;
                int lstright = CUP$XiParser$stack.peek().right;
                LinkedList<FunctionDeclNode> lst = CUP$XiParser$stack.peek().<LinkedList<FunctionDeclNode>> value();
                 RESULT = new IxiProgramNode(lst); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ixi_program",1, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // FunctionDeclList ::= FunctionDeclList Statement 
            {
                LinkedList<FunctionDeclNode> RESULT = null;
                int lstleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int lstright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                LinkedList<FunctionDeclNode> lst = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<LinkedList<FunctionDeclNode>> value();
                int stmtleft = CUP$XiParser$stack.peek().left;
                int stmtright = CUP$XiParser$stack.peek().right;
                FunctionDeclNode stmt = CUP$XiParser$stack.peek().<FunctionDeclNode> value();
                 
			lst.addLast(stmt);
			RESULT = lst;
		
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",2, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // FunctionDeclList ::= 
            {
                LinkedList<FunctionDeclNode> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",2, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // Statement ::= FunctionDecl StatementEnd 
            {
                FunctionDeclNode RESULT = null;
                int declleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int declright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                FunctionDeclNode decl = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<FunctionDeclNode> value();
                
			RESULT = decl;
		
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Statement",3, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // FunctionDecl ::= ID L_PAREN Arg R_PAREN ReturnType 
            {
                FunctionDeclNode RESULT = null;
                int idleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).left;
                int idright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).right;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<String> value();
                int argListleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int argListright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                LinkedList<FunctionArgNode> argList = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<LinkedList<FunctionArgNode>> value();
                int returnListleft = CUP$XiParser$stack.peek().left;
                int returnListright = CUP$XiParser$stack.peek().right;
                LinkedList<TypeNode> returnList = CUP$XiParser$stack.peek().<LinkedList<TypeNode>> value();
                
			RESULT = new FunctionDeclNode(id, argList, returnList);
		
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",4, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // StatementEnd ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StatementEnd",5, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // StatementEnd ::= 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StatementEnd",5, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // Arg ::= ID COLON Type Arglist 
            {
                LinkedList<FunctionArgNode> RESULT = null;
                int idleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).left;
                int idright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).right;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                int tleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int tright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                TypeNode t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<TypeNode> value();
                int lstleft = CUP$XiParser$stack.peek().left;
                int lstright = CUP$XiParser$stack.peek().right;
                LinkedList<FunctionArgNode> lst = CUP$XiParser$stack.peek().<LinkedList<FunctionArgNode>> value();
                 
			lst.addFirst(new FunctionArgNode(id, t));
			RESULT = lst;
		
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Arg",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // Arg ::= 
            {
                LinkedList<FunctionArgNode> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Arg",6, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // Arglist ::= COMMA ID COLON Type Arglist 
            {
                LinkedList<FunctionArgNode> RESULT = null;
                int idleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).left;
                int idright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).right;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                int tleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int tright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                TypeNode t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<TypeNode> value();
                int lstleft = CUP$XiParser$stack.peek().left;
                int lstright = CUP$XiParser$stack.peek().right;
                LinkedList<FunctionArgNode> lst = CUP$XiParser$stack.peek().<LinkedList<FunctionArgNode>> value();
                 			
				lst.addFirst(new FunctionArgNode(id, t));
				RESULT = lst; 
			
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Arglist",7, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // Arglist ::= 
            {
                LinkedList<FunctionArgNode> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Arglist",7, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // ReturnType ::= COLON Type ReturnTypeList 
            {
                LinkedList<TypeNode> RESULT = null;
                int tleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int tright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                TypeNode t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<TypeNode> value();
                int lstleft = CUP$XiParser$stack.peek().left;
                int lstright = CUP$XiParser$stack.peek().right;
                LinkedList<TypeNode> lst = CUP$XiParser$stack.peek().<LinkedList<TypeNode>> value();
                 lst.addFirst(t); RESULT = lst; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ReturnType",8, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // ReturnType ::= 
            {
                LinkedList<TypeNode> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ReturnType",8, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // ReturnTypeList ::= ReturnTypeList COMMA Type 
            {
                LinkedList<TypeNode> RESULT = null;
                int lstleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int lstright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                LinkedList<TypeNode> lst = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<LinkedList<TypeNode>> value();
                int tleft = CUP$XiParser$stack.peek().left;
                int tright = CUP$XiParser$stack.peek().right;
                TypeNode t = CUP$XiParser$stack.peek().<TypeNode> value();
                 lst.addLast(t); RESULT = lst; 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeList",9, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // ReturnTypeList ::= 
            {
                LinkedList<TypeNode> RESULT = null;
                 RESULT = new LinkedList<>(); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeList",9, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // Type ::= Type L_SQ_BRKT R_SQ_BRKT 
            {
                TypeNode RESULT = null;
                int tleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int tright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                TypeNode t = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<TypeNode> value();
                 RESULT = new ArrayTypeNode(t); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Type",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // Type ::= TYPE_INT 
            {
                TypeNode RESULT = null;
                 RESULT = new PrimitiveTypeNode(PrimitiveEnum.INT); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Type",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // Type ::= TYPE_BOOL 
            {
                TypeNode RESULT = null;
                 RESULT = new PrimitiveTypeNode(PrimitiveEnum.BOOL); 
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Type",10, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$XiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            return CUP$XiParser$do_action_part00000000(
                           CUP$XiParser$act_num,
                           CUP$XiParser$parser,
                           CUP$XiParser$stack,
                           CUP$XiParser$top);
    }
}

}
